// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tha.ChooseYourAdventure.Data;

#nullable disable

namespace Tha.ChooseYourAdventure.Data.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Tha.ChooseYourAdventure.Data.Entities.AdventureNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdventureNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsRootNode")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AdventureNodeId");

                    b.ToTable("Adventures");
                });

            modelBuilder.Entity("Tha.ChooseYourAdventure.Data.Entities.UserAdventure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdventureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.ToTable("UserAdventures");
                });

            modelBuilder.Entity("Tha.ChooseYourAdventure.Data.Entities.UserAdventureStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdventureStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserAdventureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdventureStepId")
                        .IsUnique();

                    b.HasIndex("UserAdventureId");

                    b.ToTable("UserAdventureSteps");
                });

            modelBuilder.Entity("Tha.ChooseYourAdventure.Data.Entities.AdventureNode", b =>
                {
                    b.HasOne("Tha.ChooseYourAdventure.Data.Entities.AdventureNode", null)
                        .WithMany("Children")
                        .HasForeignKey("AdventureNodeId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Tha.ChooseYourAdventure.Data.Entities.UserAdventure", b =>
                {
                    b.HasOne("Tha.ChooseYourAdventure.Data.Entities.AdventureNode", "Adventure")
                        .WithMany()
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adventure");
                });

            modelBuilder.Entity("Tha.ChooseYourAdventure.Data.Entities.UserAdventureStep", b =>
                {
                    b.HasOne("Tha.ChooseYourAdventure.Data.Entities.AdventureNode", "AdventureStep")
                        .WithOne()
                        .HasForeignKey("Tha.ChooseYourAdventure.Data.Entities.UserAdventureStep", "AdventureStepId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tha.ChooseYourAdventure.Data.Entities.UserAdventure", null)
                        .WithMany("Steps")
                        .HasForeignKey("UserAdventureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdventureStep");
                });

            modelBuilder.Entity("Tha.ChooseYourAdventure.Data.Entities.AdventureNode", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Tha.ChooseYourAdventure.Data.Entities.UserAdventure", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
